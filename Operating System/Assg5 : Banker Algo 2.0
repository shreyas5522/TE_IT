#include <stdio.h>

int main()
{
    int number_process = 5;
    int number_resources = 3;
    int allocation[5][3] = {{0, 1, 0},
                            {2, 0, 0},
                            {3, 0, 2},
                            {2, 1, 1},
                            {0, 0, 2}};
    int max[5][3] = {{7, 5, 3},
                     {3, 2, 2},
                     {9, 0, 2},
                     {2, 2, 2},
                     {4, 3, 3}};
    printf("Allocation matrix: \n");
    for (int i = 0; i < number_process; i++)
    {
        for (int j = 0; j < number_resources; j++)
        {
            printf("%d ", allocation[i][j]);
        }
        printf("\n");
    }
    printf("Max matrix: \n");
    for (int i = 0; i < number_process; i++)
    {
        for (int j = 0; j < number_resources; j++)
        {
            printf("%d ", max[i][j]);
        }
        printf("\n");
    }
    int need[5][3];
    int available[3] = {3, 3, 2};
    int safe_sequence[5];
    int index = 0;
    int k = 0;
    int flag = 0;
    int temp[5];
    for (int i = 0; i < number_process; i++)
    {
        temp[i] = 0;
    }
    for (int i = 0; i < number_process; i++)
    {
        for (int j = 0; j < number_resources; j++)
        {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
    printf("need matrix: \n");
    for (int i = 0; i < number_process; i++)
    {
        for (int j = 0; j < number_resources; j++)
        {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
    for (int i = 0; i < number_process; i++)
    {
        for (int j = 0; j < number_process; j++)
        {
            if (temp[j] == 0)
            {
                for (int k = 0; k < number_resources; k++)
                {
                    if (need[j][k] > available[k])
                    {
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0)
                {
                    for (int m = 0; m < number_resources; m++)
                    {
                        available[m] = available[m] + allocation[j][m];
                    }
                    safe_sequence[index] = j;
                    index++;
                    temp[j] = 1;
                }
                flag = 0;
            }
        }
    }
    printf("The safe safe_sequence is: \n");
    for (int i = 0; i < number_process - 1; i++)
    {
        printf("P%d->", safe_sequence[i]);
    }
    printf("P%d", safe_sequence[number_process - 1]);
    return 0;
}
